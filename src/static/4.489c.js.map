{"version":3,"sources":["webpack:///./src/static_source/Pages/Note/Editor.scss?bf7e","webpack:///./src/static_source/Pages/Note/Edit.js","webpack:///./src/static_source/components/Editor/index.js","webpack:///./src/static_source/components/Editor/inde.scss?f7e5"],"names":["module","exports","EditPage","history","useHistory","id","useParams","useState","title","setTitle","useQuery","API","note","retry","refetchOnWindowFocus","error","isLoading","data","useEffect","editorState","EditorState","createWithContent","convertFromRaw","JSON","parse","content","className","editCss","type","value","onChange","e","target","editorConfig","onSubmit","contentState","getCurrentContent","hasText","length","stringify","convertToRaw","editNote","then","alert","push","status","myEditor","submitText","createEmpty","setEditorState","editorRef","useRef","css","container","cls","editorContainer","readOnly","onClick","current","focus","ref"],"mappings":"6EACAA,EAAOC,QAAU,CAAC,MAAQ,oB,0mBC+DXC,UAxDE,WACf,IAAMC,EAAUC,cACRC,EAAOC,cAAPD,GAFa,IAGOE,mBAAS,GAAI,CAACC,IAHrB,GAGbA,EAHa,KAGNC,EAHM,OAKcC,YAASL,EAAIM,IAAIC,KAAM,CACxDC,OAAO,EACPC,sBAAsB,IAFhBC,EALa,EAKbA,MAAOC,EALM,EAKNA,UAAWC,EALL,EAKKA,KAK1BC,qBAAU,WACRD,GAAQR,EAASQ,EAAKT,SACrB,CAACS,IAmBJ,GAAIF,GAASC,EACX,OAAO,2CAET,IAAMG,EAAcC,cAAYC,kBAC9BC,yBAAeC,KAAKC,MAAMP,EAAKQ,WAGjC,OACE,6BACE,2BACEC,UAAWC,IAAQnB,MACnBoB,KAAK,OACLC,MAAOrB,EACPsB,SAAU,SAAAC,GAAMtB,EAASsB,EAAEC,OAAOH,UAEpC,kBAAC,IAAD,CACEI,aAAc,CACZd,eAEFe,SApCe,SAACf,GACpB,IAAMgB,EAAehB,EAAYiB,oBACjC,GAAID,EAAaE,WAAa7B,EAAM8B,OAAS,EAAG,CAC9C,IAAMb,EAAUF,KAAKgB,UAAUC,uBAAaL,IAC5CxB,IAAI8B,SAAS,CACXjC,QAAOiB,UAASpB,OACfqC,MAAK,WACNC,MAAM,YACNxC,EAAQyC,KAAK,QAJf,OAKS,SAAAb,GACU,MAAbA,EAAEc,QACJF,MAAM,yC,6yBCODG,IAlCE,SAAC,GAIZ,QAHJC,kBAGI,MAHS,SAGT,MAFJb,gBAEI,MAFO,aAEP,MADJD,oBACI,MADW,GACX,MACoC1B,oBAAS,kBAC/C0B,EAAad,YACXc,EAAad,YACbC,cAAY4B,iBAJZ,GACI7B,EADJ,KACiB8B,EADjB,KAMEC,EAAYC,iBAAO,MAOzB,OACE,yBAAKzB,UAAW0B,IAAIC,WAClB,yBAAK3B,UAAW4B,IAAIF,IAAIG,gBAAiBtB,EAAauB,UAAYJ,IAAII,UAAWC,QAR9D,WACrBP,EAAUQ,QAAQC,UAQd,kBAAC,SAAD,KACM1B,EADN,CAEE2B,IAAKV,EACL/B,YAAaA,EACbW,SAAUmB,OAGXhB,EAAauB,UACd,4BAAQC,QAbO,kBAAMvB,EAASf,KAaE4B,M,mBCjCxC/C,EAAOC,QAAU,CAAC,gBAAkB,oBAAoB,SAAW,oBAAoB,UAAY","file":"4.489c.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Note_1yJ115lcDR\"};","import React, { useState, useEffect } from 'react'\r\nimport Editor from '../../components/Editor'\r\nimport { useHistory, useParams } from 'react-router-dom'\r\nimport { API } from '../../utils/Api'\r\nimport { useQuery } from 'react-query'\r\nimport { EditorState, convertFromRaw, convertToRaw } from 'draft-js'\r\nimport editCss from './Editor.scss'\r\n\r\nconst EditPage = () => {\r\n  const history = useHistory()\r\n  const { id } = useParams()\r\n  const [ title, setTitle ] = useState('', [title])\r\n\r\n  const { error, isLoading, data } = useQuery(id, API.note, {\r\n    retry: false,\r\n    refetchOnWindowFocus: false\r\n  })\r\n  \r\n  useEffect(() => {\r\n    data && setTitle(data.title)\r\n  }, [data])\r\n\r\n  const handleSubmit = (editorState) => {\r\n    const contentState = editorState.getCurrentContent()\r\n    if (contentState.hasText() && title.length > 0) {\r\n      const content = JSON.stringify(convertToRaw(contentState))\r\n      API.editNote({\r\n        title, content, id\r\n      }).then(() => {\r\n        alert('success.')\r\n        history.push('/')\r\n      }).catch(e => {\r\n        if (e.status === 404) {\r\n          alert('not fount, create new note?')\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  if (error || isLoading ) {\r\n    return <div>Loading...</div>\r\n  }\r\n  const editorState = EditorState.createWithContent(\r\n    convertFromRaw(JSON.parse(data.content))\r\n  )\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        className={editCss.title}\r\n        type=\"text\"\r\n        value={title}\r\n        onChange={e => {setTitle(e.target.value)}}\r\n      />\r\n      <Editor \r\n        editorConfig={{\r\n          editorState\r\n        }}\r\n        onSubmit={handleSubmit}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default EditPage\r\n","import React, { useState, useRef } from 'react'\nimport { Editor, EditorState } from 'draft-js'\nimport 'draft-js/dist/Draft.css'\nimport css from './inde.scss'\nimport cls from 'classnames'\n\nconst myEditor = ({\n  submitText = 'submit',\n  onSubmit = () => {},\n  editorConfig = {}\n}) => {\n  const [ editorState, setEditorState ] = useState(() => \n    editorConfig.editorState\n    ? editorConfig.editorState\n    : EditorState.createEmpty()\n  )\n  const editorRef = useRef(null)\n  const handleModClick = () => {\n    editorRef.current.focus()\n  }\n  \n  const handleSubmit = () => onSubmit(editorState)\n\n  return (\n    <div className={css.container}>\n      <div className={cls(css.editorContainer, editorConfig.readOnly && css.readOnly)} onClick={handleModClick}>\n        <Editor\n          {...editorConfig}\n          ref={editorRef}\n          editorState={editorState}\n          onChange={setEditorState}\n        />\n      </div>\n      { !editorConfig.readOnly && (\n        <button onClick={handleSubmit}>{submitText}</button>\n      ) }\n    </div>\n  )\n}\n\nexport default myEditor\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"editorContainer\":\"Editor_NAYGGpdxJN\",\"readOnly\":\"Editor_2i4f8Ifv5g\",\"container\":\"Editor_2kCROr9gmv\"};"],"sourceRoot":""}