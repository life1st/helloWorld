{"version":3,"sources":["webpack:///./src/static/components/Editor/inde.scss?2d39","webpack:///./src/static/components/Editor/ImageUploader.js","webpack:///./src/static/components/Editor/Toolbar.js","webpack:///./src/static/components/Editor/index.js","webpack:///./src/static/Pages/Note/index.scss?afad","webpack:///./src/static/Pages/Note/index.js"],"names":["module","exports","ImageUploader","onUploaded","inputRef","useRef","onClick","current","click","style","display","ref","type","onChange","files","length","url","ToolBar","onImageUpload","data","myEditor","submitText","onSubmit","editorConfig","console","log","contentJSON","useState","EditorState","createWithContent","convertFromRaw","JSON","parse","createEmpty","editorState","setEditorState","editorRef","logState","content","getCurrentContent","convertToRaw","className","css","container","readOnly","Toolbar","contentStateWithEntity","createEntity","src","entityKey","getLastCreatedEntityKey","newEditorState","set","currentContent","AtomicBlockUtils","insertAtomicBlock","focus","cls","editorContainer","blockRendererFn","block","NotePage","id","useParams","history","useHistory","useQuery","API","note","retry","refetchOnWindowFocus","isLoading","error","replace","user","noteTitle","title","meta","name","push","confirm","deleteNote","then"],"mappings":"6EACAA,EAAOC,QAAU,CAAC,gBAAkB,oBAAoB,SAAW,oBAAoB,UAAY,sB,0GCyCpFC,G,YAtCO,SAAC,GAEjB,QADJC,kBACI,MADS,aACT,EACEC,EAAWC,mBAsBjB,OACE,8BACE,4BAAQC,QANa,WACvBF,EAASG,QAAQC,UAKf,SACA,2BACEC,MAAO,CAACC,QAAS,QACjBC,IAAKP,EACLQ,KAAK,OACLC,SA5Be,WACnB,IAAMC,EAAQV,EAASG,QAAQO,MAC3BA,GAASA,EAAMC,OAAS,GAS1BZ,EAAW,CACTa,IAAK,gBCHEC,EAdC,SAAC,GAEX,QADJC,qBACI,MADY,aACZ,EAGJ,OACE,6BACE,kBAAC,EAAD,CACEf,WALsB,SAACgB,GAAD,OAAUD,EAAcC,Q,spCCoFvCC,IA9EE,SAAC,GAIZ,QAHJC,kBAGI,MAHS,SAGT,MAFJC,gBAEI,MAFO,aAEP,MADJC,oBACI,MADW,GACX,EACJC,QAAQC,IAAIF,EAAaG,aADrB,QAEoCC,mBACtCJ,EAAaG,YACXE,cAAYC,kBACVC,yBACEC,KAAKC,MAAMT,EAAaG,eAG5BE,cAAYK,eATZ,GAEIC,EAFJ,KAEiBC,EAFjB,KAWEC,EAAY/B,iBAAO,MAInBgC,EAAW,WACf,IAAMC,EAAUJ,EAAYK,oBAC5Bf,QAAQC,IAAIe,uBAAaF,KAkC3B,OACE,yBAAKG,UAAWC,IAAIC,YACfpB,EAAaqB,UACd,kBAACC,EAAD,CACE3B,cAnCe,SAACC,GACtBkB,IACA,IACMS,EADeZ,EAAYK,oBACWQ,aACxC,QACA,YACA,CAAEC,IAAK7B,EAAKH,MAEViC,EAAYH,EAAuBI,0BACnCC,EAAiBvB,cAAYwB,IACjClB,EACA,CAACmB,eAAgBP,IAInBX,EAAemB,mBAAiBC,kBAC9BJ,EACAF,EACA,MAGFZ,IACAD,EAAU7B,QAAQiD,WAgBhB,yBAAKf,UAAWgB,IAAIf,IAAIgB,gBAAiBnC,EAAaqB,UAAYF,IAAIE,UAAWtC,QA9C9D,WACrB8B,EAAU7B,QAAQiD,UA8Cd,kBAAC,SAAD,KACMjC,EADN,CAEEZ,IAAKyB,EACLuB,gBAfmB,SAACC,GAC1BpC,QAAQC,IAAImC,EAAMhD,OAeZsB,YAAaA,EACbrB,SAAUsB,OAGXZ,EAAaqB,UACd,4BAAQtC,QAvBO,kBAAMgB,EAASY,KAuBEb,M,oBCnFxCrB,EAAOC,QAAU,CAAC,UAAY,kBAAkB,UAAY,kBAAkB,KAAO,oB,iCCDrF,4EAuDe4D,UAhDE,WAAM,IACbC,EAAOC,cAAPD,GACFE,EAAUC,cAFK,EAGcC,YAASJ,EAAIK,IAAIC,KAAM,CACxDC,OAAO,EACPC,sBAAsB,IAFhBC,EAHa,EAGbA,UAAWpD,EAHE,EAGFA,KAQnB,GAXqB,EAGIqD,OAMvBR,EAAQS,QAAQ,KAEdF,EACF,OAAQ,2CAZW,IAcbG,EAASvD,EAATuD,KAaR,OACE,yBAAKjC,UAAWC,IAAIC,WAClB,wBAAIF,UAAWC,IAAIiC,WAAYxD,EAAKyD,OACpC,uBAAGnC,UAAWC,IAAImC,MAChB,8BAAOH,EAAKI,MACZ,4BAAQxE,QAhBK,WACjB0D,EAAQe,KAAR,gBAAsBjB,EAAtB,YAeI,QACA,4BAAQxD,QAdO,WACf0E,QAAQ,4BAAD,OAA6B7D,EAAKyD,MAAlC,QACTT,IAAIc,WAAWnB,GAAIoB,MAAK,WACtBlB,EAAQe,KAAK,UAWb,WAEF,kBAAC,IAAD,CACExD,aAAc,CACZqB,UAAU,EACVlB,YAAaP,EAAKmB,WAGtB,6BACE,4BAAQhC,QAAS,WAAO0D,EAAQe,KAAK,OAArC","file":"4.e619.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"editorContainer\":\"Editor_2PhySOo0ox\",\"readOnly\":\"Editor_2OuOltIoIB\",\"container\":\"Editor_1NXcSSwe2z\"};","import React, { useRef } from 'react'\nimport FormData from 'form-data'\nimport { API } from '../../utils/Api'\n\nconst ImageUploader = ({\n  onUploaded = () => {}\n}) => {\n  const inputRef = useRef()\n  const handleUpload = () => {\n    const files = inputRef.current.files\n    if (files && files.length > 0) {\n      // const data = new FormData()\n      // data.append('file', files[0], files[0].name)\n      // API.uploadImage({\n      //   formData: data\n      // }).then(data => {\n      //   console.log(data)\n      //   onUploaded(data)\n      // })\n      onUploaded({\n        url: 'test.'\n      })\n    }\n  }\n\n  const handleImageClick = () => {\n    inputRef.current.click()\n  }\n\n  return (\n    <span>\n      <button onClick={handleImageClick}>Image</button>\n      <input\n        style={{display: 'none'}}\n        ref={inputRef}\n        type=\"file\"\n        onChange={handleUpload}\n      />\n    </span>\n  )\n}\n\nexport default ImageUploader\n","import React from 'react'\nimport ImageUploader from './ImageUploader'\n\nconst ToolBar = ({\n  onImageUpload = () => {}\n}) => {\n  const handleImageUploaded = (data) => onImageUpload(data)\n\n  return (\n    <div>\n      <ImageUploader\n        onUploaded={handleImageUploaded}\n      />\n    </div>\n  )\n}\n\nexport default ToolBar\n","import React, { useState, useRef } from 'react'\nimport { \n  Editor, EditorState, \n  convertFromRaw, \n  AtomicBlockUtils,\n  convertToRaw\n} from 'draft-js'\nimport 'draft-js/dist/Draft.css'\nimport css from './inde.scss'\nimport cls from 'classnames'\nimport Toolbar from './Toolbar'\n\nconst myEditor = ({\n  submitText = 'submit',\n  onSubmit = () => {},\n  editorConfig = {}\n}) => {\n  console.log(editorConfig.contentJSON)\n  const [ editorState, setEditorState ] = useState(\n    editorConfig.contentJSON\n    ? EditorState.createWithContent(\n        convertFromRaw(\n          JSON.parse(editorConfig.contentJSON)\n        )\n      )\n    : EditorState.createEmpty()\n  )\n  const editorRef = useRef(null)\n  const handleModClick = () => {\n    editorRef.current.focus()\n  }\n  const logState = () => {\n    const content = editorState.getCurrentContent();\n    console.log(convertToRaw(content));\n  };\n\n  const handleMediaAdd = (data) => {\n    logState()\n    const contentState = editorState.getCurrentContent();\n    const contentStateWithEntity = contentState.createEntity(\n        'image',\n        'IMMUTABLE',\n        { src: data.url }\n      )\n    const entityKey = contentStateWithEntity.getLastCreatedEntityKey();\n    const newEditorState = EditorState.set(\n      editorState,\n      {currentContent: contentStateWithEntity}\n    );\n\n\n    setEditorState(AtomicBlockUtils.insertAtomicBlock(\n      newEditorState,\n      entityKey,\n      ' '\n    ));\n\n    logState()\n    editorRef.current.focus()\n  }\n  \n  const handleSubmit = () => onSubmit(editorState)\n\n  const mediaBlockRenderer = (block) => {\n    console.log(block.type)\n  }\n\n  return (\n    <div className={css.container}>\n      { !editorConfig.readOnly && (\n        <Toolbar\n          onImageUpload={handleMediaAdd}\n        />\n      )}\n      <div className={cls(css.editorContainer, editorConfig.readOnly && css.readOnly)} onClick={handleModClick}>\n        <Editor\n          {...editorConfig}\n          ref={editorRef}\n          blockRendererFn={mediaBlockRenderer}\n          editorState={editorState}\n          onChange={setEditorState}\n        />\n      </div>\n      { !editorConfig.readOnly && (\n        <button onClick={handleSubmit}>{submitText}</button>\n      ) }\n    </div>\n  )\n}\n\nexport default myEditor\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Note_1r4czJoBEs\",\"noteTitle\":\"Note_33TVEVF5Z5\",\"meta\":\"Note_qjNvsCaKKG\"};","import React from 'react'\nimport { useQuery } from 'react-query'\nimport { API } from '../../utils/Api'\nimport { useParams, useHistory } from 'react-router-dom'\nimport Editor from '../../components/Editor'\nimport css from './index.scss'\n\nconst NotePage = () => {\n  const { id } = useParams()\n  const history = useHistory()\n  const { isLoading, data, error } = useQuery(id, API.note, {\n    retry: false,\n    refetchOnWindowFocus: false\n  })\n\n  if (error) {\n    history.replace('/')\n  }\n  if (isLoading) {\n    return (<div>Loading...</div>)\n  }\n  const { user } = data\n\n  const handleEdit = () => {\n    history.push(`/note/${id}/edit`)\n  }\n  const handleDelete = () => {\n    if (confirm(`ensure delete this note: ${data.title} ?`)) {\n      API.deleteNote(id).then(() => {\n        history.push('/')\n      })\n    }\n  }\n\n  return (\n    <div className={css.container}>\n      <h1 className={css.noteTitle}>{data.title}</h1>\n      <p className={css.meta}>\n        <span>{user.name}</span>\n        <button onClick={handleEdit}>Edit</button>\n        <button onClick={handleDelete}>Delete</button>\n      </p>\n      <Editor\n        editorConfig={{\n          readOnly: true,\n          contentJSON: data.content\n        }}\n      />\n      <div>\n        <button onClick={() => {history.push('/')}}>Back Home</button>\n      </div>\n    </div>\n  )\n}\n\nexport default NotePage\n"],"sourceRoot":""}