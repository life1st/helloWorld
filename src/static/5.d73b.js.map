{"version":3,"sources":["webpack:///./src/static_source/Pages/Note/index.scss?1068","webpack:///./src/static_source/Pages/Note/index.js","webpack:///./src/static_source/components/Editor/index.js","webpack:///./src/static_source/components/Editor/inde.scss?f7e5"],"names":["module","exports","NotePage","id","useParams","history","useHistory","useQuery","API","note","isLoading","data","error","replace","user","editorState","EditorState","createWithContent","convertFromRaw","JSON","parse","content","className","css","container","noteTitle","title","meta","name","onClick","push","confirm","deleteNote","then","editorConfig","readOnly","myEditor","submitText","onSubmit","useState","createEmpty","setEditorState","editorRef","useRef","cls","editorContainer","current","focus","ref","onChange"],"mappings":"6EACAA,EAAOC,QAAU,CAAC,UAAY,kBAAkB,UAAY,kBAAkB,KAAO,oB,iCCDrF,mFAuDeC,UA/CE,WAAM,IACbC,EAAOC,cAAPD,GACFE,EAAUC,cAFK,EAGcC,YAASJ,EAAIK,IAAIC,MAA5CC,EAHa,EAGbA,UAAWC,EAHE,EAGFA,KAInB,GAPqB,EAGIC,OAEvBP,EAAQQ,QAAQ,KAEdH,EACF,OAAQ,2CARW,IAUbI,EAASH,EAATG,KACFC,EAAcC,cAAYC,kBAC9BC,yBAAeC,KAAKC,MAAMT,EAAKU,WAcjC,OACE,yBAAKC,UAAWC,IAAIC,WAClB,wBAAIF,UAAWC,IAAIE,WAAYd,EAAKe,OACpC,uBAAGJ,UAAWC,IAAII,MAChB,8BAAOb,EAAKc,MACZ,4BAAQC,QAhBK,WACjBxB,EAAQyB,KAAR,gBAAsB3B,EAAtB,YAeI,QACA,4BAAQ0B,QAdO,WACfE,QAAQ,4BAAD,OAA6BpB,EAAKe,MAAlC,QACTlB,IAAIwB,WAAW7B,GAAI8B,MAAK,SAAAtB,GACtBN,EAAQyB,KAAK,UAWb,WAEF,kBAAC,IAAD,CACEI,aAAc,CACZC,UAAU,EACVpB,iBAGJ,6BACE,4BAAQc,QAAS,WAAOxB,EAAQyB,KAAK,OAArC,iB,6yBCTOM,IAlCE,SAAC,GAIZ,QAHJC,kBAGI,MAHS,SAGT,MAFJC,gBAEI,MAFO,aAEP,MADJJ,oBACI,MADW,GACX,MACoCK,oBAAS,kBAC/CL,EAAanB,YACXmB,EAAanB,YACbC,cAAYwB,iBAJZ,GACIzB,EADJ,KACiB0B,EADjB,KAMEC,EAAYC,iBAAO,MAOzB,OACE,yBAAKrB,UAAWC,IAAIC,WAClB,yBAAKF,UAAWsB,IAAIrB,IAAIsB,gBAAiBX,EAAaC,UAAYZ,IAAIY,UAAWN,QAR9D,WACrBa,EAAUI,QAAQC,UAQd,kBAAC,SAAD,KACMb,EADN,CAEEc,IAAKN,EACL3B,YAAaA,EACbkC,SAAUR,OAGXP,EAAaC,UACd,4BAAQN,QAbO,kBAAMS,EAASvB,KAaEsB,M,mBCjCxCrC,EAAOC,QAAU,CAAC,gBAAkB,oBAAoB,SAAW,oBAAoB,UAAY","file":"5.d73b.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Note_2N5uO4Wbsa\",\"noteTitle\":\"Note_1Tn-QQ2s01\",\"meta\":\"Note_3_w_NXF1fd\"};","import React from 'react'\nimport { useQuery } from 'react-query'\nimport { API } from '../../utils/Api'\nimport { useParams, useHistory } from 'react-router-dom'\nimport Editor from '../../components/Editor'\nimport { EditorState, convertFromRaw } from 'draft-js'\nimport css from './index.scss'\n\nconst NotePage = () => {\n  const { id } = useParams()\n  const history = useHistory()\n  const { isLoading, data, error } = useQuery(id, API.note)\n  if (error) {\n    history.replace('/')\n  }\n  if (isLoading) {\n    return (<div>Loading...</div>)\n  }\n  const { user } = data\n  const editorState = EditorState.createWithContent(\n    convertFromRaw(JSON.parse(data.content))\n  )\n\n  const handleEdit = () => {\n    history.push(`/note/${id}/edit`)\n  }\n  const handleDelete = () => {\n    if (confirm(`ensure delete this note: ${data.title} ?`)) {\n      API.deleteNote(id).then(data => {\n        history.push('/')\n      })\n    }\n  }\n\n  return (\n    <div className={css.container}>\n      <h1 className={css.noteTitle}>{data.title}</h1>\n      <p className={css.meta}>\n        <span>{user.name}</span>\n        <button onClick={handleEdit}>Edit</button>\n        <button onClick={handleDelete}>Delete</button>\n      </p>\n      <Editor\n        editorConfig={{\n          readOnly: true,\n          editorState\n        }}\n      />\n      <div>\n        <button onClick={() => {history.push('/')}}>Back Home</button>\n      </div>\n    </div>\n  )\n}\n\nexport default NotePage\n","import React, { useState, useRef } from 'react'\nimport { Editor, EditorState } from 'draft-js'\nimport 'draft-js/dist/Draft.css'\nimport css from './inde.scss'\nimport cls from 'classnames'\n\nconst myEditor = ({\n  submitText = 'submit',\n  onSubmit = () => {},\n  editorConfig = {}\n}) => {\n  const [ editorState, setEditorState ] = useState(() => \n    editorConfig.editorState\n    ? editorConfig.editorState\n    : EditorState.createEmpty()\n  )\n  const editorRef = useRef(null)\n  const handleModClick = () => {\n    editorRef.current.focus()\n  }\n  \n  const handleSubmit = () => onSubmit(editorState)\n\n  return (\n    <div className={css.container}>\n      <div className={cls(css.editorContainer, editorConfig.readOnly && css.readOnly)} onClick={handleModClick}>\n        <Editor\n          {...editorConfig}\n          ref={editorRef}\n          editorState={editorState}\n          onChange={setEditorState}\n        />\n      </div>\n      { !editorConfig.readOnly && (\n        <button onClick={handleSubmit}>{submitText}</button>\n      ) }\n    </div>\n  )\n}\n\nexport default myEditor\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"editorContainer\":\"Editor_NAYGGpdxJN\",\"readOnly\":\"Editor_2i4f8Ifv5g\",\"container\":\"Editor_2kCROr9gmv\"};"],"sourceRoot":""}